# The Shalldn *editor* requirements
* Implements **Shalldn editor**

## Project navigation

**Editor.NAV.RQ_DEF**  
The editor **shall** provide navigation to a requirement definition from any occurrence of *identifier* of the requirement in any text file of the Shalldn project.

**Editor.NAV.IMPL**
The editor**shall** provide navigation to an *implementation clause* from any occurrence of an *identifier* of the clause in any text file of the Shalldn project.

**Editor.NAV.TESTS**
The editor**shall** provide navigation to a *test clause* from any occurrence of an *identifier* of the clause in any text file of the Shalldn project.

**Editor.NAV.XREF**
The editor**shall** provide navigation to a *cross-reference* from any occurrence of an *identifier* included in the *cross-reference* in any text file of the Shalldn project.

**Editor.NAV.TERM_DEF**
The editor **shall** provide navigation to a term definition from any occurrence of the subject of the definition that is **separately bolded** or *separately italicized* in any shalldn file in the project.

## Problem indication

**Editor.PRBLM_PARSER**  
The editor **shall** indicate as problems all errors and warnings generated by the Shalldn parser for a file with name extension ".shalldn".

**Editor.ERR.MULT_DEF**  
The editor **shall** indicate an error problem for every requirement with *identifier* for which the Shalldn analyzer reported multiple text references to requirement definitions.

**Editor.INFO.NOIMPL**  
The editor **shall** indicate an error for every requirement for which there is no any *implementation clause* in the project when the document containing the requirement for which an *implementation clause* does exist.

**Editor.INFO.NOIMPL_DOC**  
The editor **shall** indicate a problem condition of informational severity for a shalldn document that only has requirements for which there is no any *implementation clause* in the project.

$Unsure  
**Editor.CFG_NOIMP**  
The editor **shall** allow switching on and off mode for hiding errors for requirements without implementation.

**Editor.ERR.NO_IMPLMNT_TGT**  
The editor **shall** indicate an error for every *implementation clause* for which the Shalldn analyzer returns an empty list of requirement definitions with the *identifier* from the clause.

$Unsure   
**Editor.CFG_PRJ_FTYPES**  
The editor **shall** allow configuring a set of file name extensions to select a non-requirement files included in project.

**Editor.ERR.DEMOTE**  
The editor **shall** allow reporting errors with reduced severity (as warnings) until the end of editing session.
* Rationale: In VS Code active errors prevents starting debug session. Demoting errors to warnings should not be permanent setting so that the user is reminded of actual scope of problems at least at start of session.

**Editor.TESTS**
The editor **shall** allow reporting warnings in a currently edited *requirement file* for every requirement that does not have associated *test clause* in any of project files.

## Completion proposals

**Editor.CMPL.SUBJ**  
When in a *requirement file* the editor caret is located immediately after a string of 3 or more initial characters of the *document subject* the editor **shall** include the *document subject* in the list of proposed completions.

**Editor.CMPL.KW_REQ**  
When in a *requirement file* the editor caret is located immediately after a string of 3 or more initial characters of one of the keywords listed below the editor **shall** include that keyword in the list of proposed completions:
* '* Implements';
* '**shall**';

**Editor.CMPL.KW_NREQ**  
When in a *non-requirement file* the editor caret is located immediately after a string of 3 or more initial characters of keyword '$$Implements' the editor **shall** include that keyword in the list of proposed completions.

**Editor.CMPL.IMPL_NREQ**  
When in a *non-requirement file* the editor caret is located on a line past the string '$$Implements ' and after a fragment of an *identifier* the editor **shall** include in the list of proposed completions every requirement *identifier* and *namespace* that starts with the fragment.

**Editor.CMPL.IMPL_REQ**  
When in a *requirement file* the editor caret is located on a line that starts with string '* Implements ' and immediately after a string '**' followed by a fragment of an *identifier* the editor **shall** include in the list of proposed completions every requirement *identifier* and *namespace* that starts with the fragment.

**Editor.CMPL.ID_REQ**  
When in a *requirement file* the editor caret is located on a line that starts with string '**' after immediately following fragment of an *identifier* the editor **shall** include in the list of proposed completions every requirement *identifier* and *namespace* defined in that file that starts with the fragment.

**Editor.CMPL.NS_ORD**
In a list of proposed completions editor **shall** present namespaces prior to identifiers.

**Editor.CMPL.DEFS**  
When in a *requirement file* the editor caret is located after a string of words with the first word immediately following a solitary character '*' the editor **shall** include in the list of proposed completions every subject of term definition that starts from that string.

## Refactoring

**Editor.RENAME**
When in a project file the editor caret is located inside *identifier* of an existing requirement the editor **shall** provide operation for replacing that identifier with a new one in the requirement definition and in all referencing *implementation clause*s, *test clause*s and *cross-reference*s.

**Editor.RENAME_VALIDATE**
The editor **shall** fail operation for replacing a requirement *identifier* without changing any files if the replacement text does not conform the definition of *identifier*.