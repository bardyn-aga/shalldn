# The Shalldn *analyzer* requirements
* Implements **Shalldn analyzer**

## Definitions

### Character position
An address of a character in the file consisting of a number in the file of the line with the character and a sequential number of the character in the line with the first line and the first character having number 0.

### Text range address
An address of a contiguous fragment of text consisting of *character position* of the the starting  and ending character of the fragment.

### Text reference
Address of a text fragment in a project file consisting of the file path relative to the project root and the *text range address* of the fragment.

### Implementation clause
Either:
* *group implementation clause*;
* *individual implementation clause*;
* *inline implementation clause*;

### Test clause
Either:
* *inline test clause*;
* *gherkin scenario test clause*;

### Namespace
Of identifier: a portion of *identifier* preceding the last dot character.

## Requirements

**Analyzer.PROJECT**  
Within a root directory of a project the analyzer **shall** analyze all the files with the name extension ".shalldn" as *requirement file* *(n.b.)* and all the files with other configured extensions as *non-requirement file* *(n.b.)*.

**Analyzer.GITIGNORE**  
The analyzer **shall** exclude from analyzing any file matching the selection rules in ".gitignore" files within the project directories as specified in [git documentation](https://git-scm.com/docs/gitignore).

**Analyzer.IGNORE_NONPROJ**  
When requested to analyze any file outside of the root directory of a project the analyzer **shall** ignore ignore the request.

**Analyzer.RQS**  
For each *identifier* of a requirement defined in project the analyzer **shall** produce a list of text references to every requirement definition for the *identifier*.

**Analyzer.ERR.DUP_RQ_ID**  
The analyzer **shall** indicate an error condition for every requirement with the same *identifier* as any other requirement in the project.

**Analyzer.CMNT_IMPLMNT**  
In each non-requirement file included in a project the analyzer **shall** recognize a text fragment that starts with a word '$$Implements' followed by an one or more comma separated *identifier*s up to end of line as an *inline implementation clause* *(n.b.)*.

**Analyzer.IMPLNT**  
For each *identifier* of a requirement defined in the project the analyzer **shall** produce a list of text references to every *implementation clause* with the *identifier*.

**Analyzer.INFO_NOIMPL**  
The analyzer **shall** indicate indicate a problem condition of informational severity for every requirement for which there is no any *implementation clause* in the project when the document containing the requirement for which an *implementation clause* does exist.

**Analyzer.INFO_NOIMPL_DOC**  
The analyzer **shall** indicate a problem condition of informational severity for a shalldn document that only has requirements for which there is no any *implementation clause* in the project.

**Analyzer.ERR.NOIMPL_TGT**  
The analyzer **shall** indicate an error condition for every *implementation clause* that has an *identifier* for which there is no requirement defined in the project.

**Analyzer.ERR.XREF_TGT**  
The analyzer **shall** indicate an error condition for every *identifier* in a *cross-reference*  for which there is no requirement defined in the project.

**Analyzer.DEFS**
For any term definition in the project in response to query with definition subject the analyzer **shall** produce a list of text references to the matching definition body.

**Analyzer.ERR.DEFS_DUPS**
The analyzer **shall** indicate an error condition for every subject of term definition for which multiple definitions exist.

**Analyzer.DEFS_CASE**
The analyzer **shall** ignore the case of definition subject in a query except when the subject is in all capital letters.

**Analyzer.TEST.CLAUSE**
In each non-requirement file included in a project the analyzer **shall** recognize a text fragment that starts with a word '$$Tests' followed by an one or more comma separated *identifier*s up to end of line as an *inline test clause* *(n.b.)*.

**Analyzer.TEST.GHERKIN**
In each file with name extension ".feature" included in a project the analyzer **shall** recognize a text line that starts with a word 'Scenario:' followed by a single *identifier* containing a *namespace* as a *gherkin scenario test clause* *(n.b.)*.

**Analyzer.TEST.LIST**  
For each *identifier* of a requirement defined in the project the analyzer **shall** produce a list of text references to every *test clause* with the *identifier*.

**Analyzer.TEST.NO_TGT**  
The analyzer **shall** indicate an error condition for every *test clause* that has an *identifier* for which there is no requirement defined in the project.

**Analyzer.MODS**  
When any of the project files is modified the analyzer **shall** automatically perform analysis of that files and all the files that have links to the modified files either prior or after the modification.

**Analyzer.NOTIFY**
After completing analysis of project initiated by explicit request or file modification the analyzer **shall** produce notification that includes the following:
* the list of all term definitions in the project if the list changed since previous notification;
* the hierarchical list of identifiers of tagged requirements grouped by *tag* then by *namespace* if the list changed since previous notification;