// Generated from ../../shalldn.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class shalldnLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly WHITESPACE = 7;
	public static readonly STAR = 8;
	public static readonly MINUS = 9;
	public static readonly UL = 10;
	public static readonly HASH = 11;
	public static readonly CAP_WORD = 12;
	public static readonly QUOTED_FRAGMENT = 13;
	public static readonly WORD = 14;
	public static readonly IDENTIFIER = 15;
	public static readonly SENTENCE_STOP = 16;
	public static readonly PUNCTUATION = 17;
	public static readonly SHALL = 18;
	public static readonly NB = 19;
	public static readonly BOLDED_ID = 20;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "WHITESPACE", "WORD_CHAR", 
		"CAPITAL_CHAR", "STAR", "MINUS", "UL", "HASH", "CAP_WORD", "QUOTED_FRAGMENT", 
		"WORD", "IDENTIFIER", "SENTENCE_STOP", "PUNCTUATION", "SHALL", "NB", "BOLDED_ID",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'*(i.e.'", "')*'", "'*('", "'\n'", "'Implements'", "'.\n'", 
		undefined, "'*'", "'-'", "'_'", "'#'", undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, "'*(n.b.)*'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		"WHITESPACE", "STAR", "MINUS", "UL", "HASH", "CAP_WORD", "QUOTED_FRAGMENT", 
		"WORD", "IDENTIFIER", "SENTENCE_STOP", "PUNCTUATION", "SHALL", "NB", "BOLDED_ID",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(shalldnLexer._LITERAL_NAMES, shalldnLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return shalldnLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(shalldnLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "shalldn.g4"; }

	// @Override
	public get ruleNames(): string[] { return shalldnLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return shalldnLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return shalldnLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return shalldnLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x16\xB5\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x03\x03" +
		"\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03" +
		"\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03" +
		"\x07\x03\x07\x03\x07\x03\b\x06\bN\n\b\r\b\x0E\bO\x03\b\x03\b\x03\t\x03" +
		"\t\x03\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E\x03" +
		"\x0F\x03\x0F\x07\x0Fb\n\x0F\f\x0F\x0E\x0Fe\v\x0F\x03\x10\x03\x10\x06\x10" +
		"i\n\x10\r\x10\x0E\x10j\x03\x10\x03\x10\x03\x10\x06\x10p\n\x10\r\x10\x0E" +
		"\x10q\x03\x10\x05\x10u\n\x10\x03\x11\x06\x11x\n\x11\r\x11\x0E\x11y\x03" +
		"\x12\x03\x12\x03\x12\x06\x12\x7F\n\x12\r\x12\x0E\x12\x80\x03\x13\x03\x13" +
		"\x03\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15" +
		"\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15" +
		"\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x05\x15\x9D\n\x15\x03" +
		"\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03" +
		"\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03" +
		"\x17\x03\x17\x03\x17\x05\x17\xB4\n\x17\x03O\x02\x02\x18\x03\x02\x03\x05" +
		"\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\x02" +
		"\x13\x02\x02\x15\x02\n\x17\x02\v\x19\x02\f\x1B\x02\r\x1D\x02\x0E\x1F\x02" +
		"\x0F!\x02\x10#\x02\x11%\x02\x12\'\x02\x13)\x02\x14+\x02\x15-\x02\x16\x03" +
		"\x02\x07\x05\x02\v\v\x0F\x0F\"\"\x06\x022;C\\aac|\x03\x02C\\\x05\x02#" +
		"#00==\x05\x02*+./aa\x02\xBB\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02" +
		"\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02" +
		"\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02" +
		"\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02" +
		"\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02" +
		"\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)" +
		"\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x03/\x03\x02" +
		"\x02\x02\x056\x03\x02\x02\x02\x079\x03\x02\x02\x02\t<\x03\x02\x02\x02" +
		"\v>\x03\x02\x02\x02\rI\x03\x02\x02\x02\x0FM\x03\x02\x02\x02\x11S\x03\x02" +
		"\x02\x02\x13U\x03\x02\x02\x02\x15W\x03\x02\x02\x02\x17Y\x03\x02\x02\x02" +
		"\x19[\x03\x02\x02\x02\x1B]\x03\x02\x02\x02\x1D_\x03\x02\x02\x02\x1Ft\x03" +
		"\x02\x02\x02!w\x03\x02\x02\x02#{\x03\x02\x02\x02%\x82\x03\x02\x02\x02" +
		"\'\x84\x03\x02\x02\x02)\x9C\x03\x02\x02\x02+\x9E\x03\x02\x02\x02-\xB3" +
		"\x03\x02\x02\x02/0\x07,\x02\x0201\x07*\x02\x0212\x07k\x02\x0223\x070\x02" +
		"\x0234\x07g\x02\x0245\x070\x02\x025\x04\x03\x02\x02\x0267\x07+\x02\x02" +
		"78\x07,\x02\x028\x06\x03\x02\x02\x029:\x07,\x02\x02:;\x07*\x02\x02;\b" +
		"\x03\x02\x02\x02<=\x07\f\x02\x02=\n\x03\x02\x02\x02>?\x07K\x02\x02?@\x07" +
		"o\x02\x02@A\x07r\x02\x02AB\x07n\x02\x02BC\x07g\x02\x02CD\x07o\x02\x02" +
		"DE\x07g\x02\x02EF\x07p\x02\x02FG\x07v\x02\x02GH\x07u\x02\x02H\f\x03\x02" +
		"\x02\x02IJ\x070\x02\x02JK\x07\f\x02\x02K\x0E\x03\x02\x02\x02LN\t\x02\x02" +
		"\x02ML\x03\x02\x02\x02NO\x03\x02\x02\x02OP\x03\x02\x02\x02OM\x03\x02\x02" +
		"\x02PQ\x03\x02\x02\x02QR\b\b\x02\x02R\x10\x03\x02\x02\x02ST\t\x03\x02" +
		"\x02T\x12\x03\x02\x02\x02UV\t\x04\x02\x02V\x14\x03\x02\x02\x02WX\x07," +
		"\x02\x02X\x16\x03\x02\x02\x02YZ\x07/\x02\x02Z\x18\x03\x02\x02\x02[\\\x07" +
		"a\x02\x02\\\x1A\x03\x02\x02\x02]^\x07%\x02\x02^\x1C\x03\x02\x02\x02_c" +
		"\x05\x13\n\x02`b\x05\x11\t\x02a`\x03\x02\x02\x02be\x03\x02\x02\x02ca\x03" +
		"\x02\x02\x02cd\x03\x02\x02\x02d\x1E\x03\x02\x02\x02ec\x03\x02\x02\x02" +
		"fh\x07$\x02\x02gi\v\x02\x02\x02hg\x03\x02\x02\x02ij\x03\x02\x02\x02jh" +
		"\x03\x02\x02\x02jk\x03\x02\x02\x02kl\x03\x02\x02\x02lu\x07$\x02\x02mo" +
		"\x07)\x02\x02np\v\x02\x02\x02on\x03\x02\x02\x02pq\x03\x02\x02\x02qo\x03" +
		"\x02\x02\x02qr\x03\x02\x02\x02rs\x03\x02\x02\x02su\x07)\x02\x02tf\x03" +
		"\x02\x02\x02tm\x03\x02\x02\x02u \x03\x02\x02\x02vx\x05\x11\t\x02wv\x03" +
		"\x02\x02\x02xy\x03\x02\x02\x02yw\x03\x02\x02\x02yz\x03\x02\x02\x02z\"" +
		"\x03\x02\x02\x02{~\x05!\x11\x02|}\x070\x02\x02}\x7F\x05!\x11\x02~|\x03" +
		"\x02\x02\x02\x7F\x80\x03\x02\x02\x02\x80~\x03\x02\x02\x02\x80\x81\x03" +
		"\x02\x02\x02\x81$\x03\x02\x02\x02\x82\x83\t\x05\x02\x02\x83&\x03\x02\x02" +
		"\x02\x84\x85\t\x06\x02\x02\x85(\x03\x02\x02\x02\x86\x87\x05\x15\v\x02" +
		"\x87\x88\x05\x15\v\x02\x88\x89\x07u\x02\x02\x89\x8A\x07j\x02\x02\x8A\x8B" +
		"\x07c\x02\x02\x8B\x8C\x07n\x02\x02\x8C\x8D\x07n\x02\x02\x8D\x8E\x03\x02" +
		"\x02\x02\x8E\x8F\x05\x15\v\x02\x8F\x90\x05\x15\v\x02\x90\x9D\x03\x02\x02" +
		"\x02\x91\x92\x05\x19\r\x02\x92\x93\x05\x19\r\x02\x93\x94\x07u\x02\x02" +
		"\x94\x95\x07j\x02\x02\x95\x96\x07c\x02\x02\x96\x97\x07n\x02\x02\x97\x98" +
		"\x07n\x02\x02\x98\x99\x03\x02\x02\x02\x99\x9A\x05\x19\r\x02\x9A\x9B\x05" +
		"\x19\r\x02\x9B\x9D\x03\x02\x02\x02\x9C\x86\x03\x02\x02\x02\x9C\x91\x03" +
		"\x02\x02\x02\x9D*\x03\x02\x02\x02\x9E\x9F\x07,\x02\x02\x9F\xA0\x07*\x02" +
		"\x02\xA0\xA1\x07p\x02\x02\xA1\xA2\x070\x02\x02\xA2\xA3\x07d\x02\x02\xA3" +
		"\xA4\x070\x02\x02\xA4\xA5\x07+\x02\x02\xA5\xA6\x07,\x02\x02\xA6,\x03\x02" +
		"\x02\x02\xA7\xA8\x05\x15\v\x02\xA8\xA9\x05\x15\v\x02\xA9\xAA\x05#\x12" +
		"\x02\xAA\xAB\x05\x15\v\x02\xAB\xAC\x05\x15\v\x02\xAC\xB4\x03\x02\x02\x02" +
		"\xAD\xAE\x05\x19\r\x02\xAE\xAF\x05\x19\r\x02\xAF\xB0\x05#\x12\x02\xB0" +
		"\xB1\x05\x19\r\x02\xB1\xB2\x05\x19\r\x02\xB2\xB4\x03\x02\x02\x02\xB3\xA7" +
		"\x03\x02\x02\x02\xB3\xAD\x03\x02\x02\x02\xB4.\x03\x02\x02\x02\f\x02Oc" +
		"jqty\x80\x9C\xB3\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!shalldnLexer.__ATN) {
			shalldnLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(shalldnLexer._serializedATN));
		}

		return shalldnLexer.__ATN;
	}

}

